{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/robbiezuazua/git/stackstacks/src/views/CareerListing/components/Categories/Categories.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport { Grid, useMediaQuery } from '@material-ui/core';\nimport { SectionHeader, IconAlternate, TypedText } from 'components/molecules';\nimport { CardCategory } from 'components/organisms';\nconst useStyles = makeStyles(() => ({\n  typed: {\n    fontWeight: 'bold'\n  }\n}));\n\nconst Categories = ({\n  data,\n  className,\n  ...rest\n}) => {\n  _s();\n\n  const classes = useStyles();\n  const theme = useTheme();\n  const isMd = useMediaQuery(theme.breakpoints.up('md'), {\n    defaultMatches: true\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: className,\n    ...rest,\n    children: [/*#__PURE__*/_jsxDEV(SectionHeader, {\n      title: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [\"Explore by category \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 33\n        }, this), \" and find the best jobs\", ' ', isMd ? null : /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 28\n        }, this), \" for\\xA0\", /*#__PURE__*/_jsxDEV(TypedText, {\n          component: \"span\",\n          variant: \"h4\",\n          color: \"secondary\",\n          className: classes.typed,\n          typedProps: {\n            strings: ['Web Developers.', 'UI/UX Designers.', 'Business Analists.', 'Scrum Masters.', 'Finance & Sales'],\n            typeSpeed: 50,\n            loop: true\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true),\n      align: \"left\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: isMd ? 4 : 1,\n      children: data.map((item, index) => /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        container: true,\n        alignItems: \"center\",\n        direction: \"column\",\n        xs: 6,\n        sm: 6,\n        md: 3,\n        \"data-aos\": \"fade-up\",\n        children: /*#__PURE__*/_jsxDEV(CardCategory, {\n          variant: \"outlined\",\n          liftUp: true,\n          align: \"left\",\n          title: item.title,\n          icon: /*#__PURE__*/_jsxDEV(IconAlternate, {\n            fontIconClass: item.icon,\n            size: \"medium\",\n            color: item.iconColor\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Categories, \"9025em9jOQdmzpWvV0plUgcVqs8=\", false, function () {\n  return [useStyles, useTheme, useMediaQuery];\n});\n\n_c = Categories;\nexport default Categories;\n\nvar _c;\n\n$RefreshReg$(_c, \"Categories\");","map":{"version":3,"sources":["/Users/robbiezuazua/git/stackstacks/src/views/CareerListing/components/Categories/Categories.tsx"],"names":["React","makeStyles","useTheme","Grid","useMediaQuery","SectionHeader","IconAlternate","TypedText","CardCategory","useStyles","typed","fontWeight","Categories","data","className","rest","classes","theme","isMd","breakpoints","up","defaultMatches","strings","typeSpeed","loop","map","item","index","title","icon","iconColor"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,EAAqBC,QAArB,QAAqC,0BAArC;AACA,SAASC,IAAT,EAAeC,aAAf,QAAoC,mBAApC;AAEA,SAASC,aAAT,EAAwBC,aAAxB,EAAuCC,SAAvC,QAAwD,sBAAxD;AACA,SAASC,YAAT,QAA6B,sBAA7B;AAEA,MAAMC,SAAS,GAAGR,UAAU,CAAC,OAAO;AAClCS,EAAAA,KAAK,EAAE;AACLC,IAAAA,UAAU,EAAE;AADP;AAD2B,CAAP,CAAD,CAA5B;;AAMA,MAAMC,UAAU,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,SAAR;AAAmB,KAAGC;AAAtB,CAAD,KAAmE;AAAA;;AACpF,QAAMC,OAAO,GAAGP,SAAS,EAAzB;AAEA,QAAMQ,KAAK,GAAGf,QAAQ,EAAtB;AACA,QAAMgB,IAAI,GAAGd,aAAa,CAACa,KAAK,CAACE,WAAN,CAAkBC,EAAlB,CAAqB,IAArB,CAAD,EAA6B;AACrDC,IAAAA,cAAc,EAAE;AADqC,GAA7B,CAA1B;AAIA,sBACE;AAAK,IAAA,SAAS,EAAEP,SAAhB;AAAA,OAA+BC,IAA/B;AAAA,4BACE,QAAC,aAAD;AACE,MAAA,KAAK,eACH;AAAA,wDACsB;AAAA;AAAA;AAAA;AAAA,gBADtB,6BACoD,GADpD,EAEGG,IAAI,GAAG,IAAH,gBAAU;AAAA;AAAA;AAAA;AAAA,gBAFjB,2BAGE,QAAC,SAAD;AACE,UAAA,SAAS,EAAC,MADZ;AAEE,UAAA,OAAO,EAAC,IAFV;AAGE,UAAA,KAAK,EAAC,WAHR;AAIE,UAAA,SAAS,EAAEF,OAAO,CAACN,KAJrB;AAKE,UAAA,UAAU,EAAE;AACVY,YAAAA,OAAO,EAAE,CACP,iBADO,EAEP,kBAFO,EAGP,oBAHO,EAIP,gBAJO,EAKP,iBALO,CADC;AAQVC,YAAAA,SAAS,EAAE,EARD;AASVC,YAAAA,IAAI,EAAE;AATI;AALd;AAAA;AAAA;AAAA;AAAA,gBAHF;AAAA,sBAFJ;AAwBE,MAAA,KAAK,EAAC;AAxBR;AAAA;AAAA;AAAA;AAAA,YADF,eA2BE,QAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAgB,MAAA,OAAO,EAAEN,IAAI,GAAG,CAAH,GAAO,CAApC;AAAA,gBACGL,IAAI,CAACY,GAAL,CAAS,CAACC,IAAD,EAAYC,KAAZ,kBACR,QAAC,IAAD;AAEE,QAAA,IAAI,MAFN;AAGE,QAAA,SAAS,MAHX;AAIE,QAAA,UAAU,EAAC,QAJb;AAKE,QAAA,SAAS,EAAC,QALZ;AAME,QAAA,EAAE,EAAE,CANN;AAOE,QAAA,EAAE,EAAE,CAPN;AAQE,QAAA,EAAE,EAAE,CARN;AASE,oBAAS,SATX;AAAA,+BAWE,QAAC,YAAD;AACE,UAAA,OAAO,EAAC,UADV;AAEE,UAAA,MAAM,MAFR;AAGE,UAAA,KAAK,EAAC,MAHR;AAIE,UAAA,KAAK,EAAED,IAAI,CAACE,KAJd;AAKE,UAAA,IAAI,eACF,QAAC,aAAD;AACE,YAAA,aAAa,EAAEF,IAAI,CAACG,IADtB;AAEE,YAAA,IAAI,EAAC,QAFP;AAGE,YAAA,KAAK,EAAEH,IAAI,CAACI;AAHd;AAAA;AAAA;AAAA;AAAA;AANJ;AAAA;AAAA;AAAA;AAAA;AAXF,SACOH,KADP;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YA3BF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA2DD,CAnED;;GAAMf,U;UACYH,S,EAEFP,Q,EACDE,a;;;KAJTQ,U;AAqEN,eAAeA,UAAf","sourcesContent":["import React from 'react';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport { Grid, useMediaQuery } from '@material-ui/core';\n\nimport { SectionHeader, IconAlternate, TypedText } from 'components/molecules';\nimport { CardCategory } from 'components/organisms';\n\nconst useStyles = makeStyles(() => ({\n  typed: {\n    fontWeight: 'bold',\n  },\n}));\n\nconst Categories = ({ data, className, ...rest }: ViewComponentProps): JSX.Element => {\n  const classes = useStyles();\n\n  const theme = useTheme();\n  const isMd = useMediaQuery(theme.breakpoints.up('md'), {\n    defaultMatches: true,\n  });\n\n  return (\n    <div className={className} {...rest}>\n      <SectionHeader\n        title={\n          <>\n            Explore by category <br /> and find the best jobs{' '}\n            {isMd ? null : <br />} for&nbsp;\n            <TypedText\n              component=\"span\"\n              variant=\"h4\"\n              color=\"secondary\"\n              className={classes.typed}\n              typedProps={{\n                strings: [\n                  'Web Developers.',\n                  'UI/UX Designers.',\n                  'Business Analists.',\n                  'Scrum Masters.',\n                  'Finance & Sales',\n                ],\n                typeSpeed: 50,\n                loop: true,\n              }}\n            />\n          </>\n        }\n        align=\"left\"\n      />\n      <Grid container spacing={isMd ? 4 : 1}>\n        {data.map((item: any, index: number) => (\n          <Grid\n            key={index}\n            item\n            container\n            alignItems=\"center\"\n            direction=\"column\"\n            xs={6}\n            sm={6}\n            md={3}\n            data-aos=\"fade-up\"\n          >\n            <CardCategory\n              variant=\"outlined\"\n              liftUp\n              align=\"left\"\n              title={item.title}\n              icon={\n                <IconAlternate\n                  fontIconClass={item.icon}\n                  size=\"medium\"\n                  color={item.iconColor}\n                />\n              }\n            />\n          </Grid>\n        ))}\n      </Grid>\n    </div>\n  );\n};\n\nexport default Categories;\n"]},"metadata":{},"sourceType":"module"}